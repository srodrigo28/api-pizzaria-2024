 generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// criar tabelas depois de alterar o schema npx prisma migrate dev
model User{
  id String @id @default( uuid())
  name String
  email String
  password String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users") // nome que vai aparecer na tabela do banco
}

model Category{
  id String @id @default( uuid())
  name String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("categories") // nome que vai aparecer na tabela
  products Product[] // relacionamento uma categoria pode ter vairos produtos
}

model Profile{
  id String @id @default( uuid())
  name String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("profile") // nome que vai aparecer na tabela
}

model Product{
  id String @id @default( uuid())
  name String
  price String
  description String
  banner String

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  // Relacionamento 
  category Category @relation(fields: [category_id], references: [id])

  @@map("products")
  category_id String
  items Item[] // relacionamento uma categoria pode ter vairos
}

model Order{
  id String @id @default( uuid())
  table Int
  status Boolean @default(false)
  draft Boolean @default(false)
  name String?

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("orders")
  items Item[]
}

model Item{
  id String @id @default(uuid())
  amount Int

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order Order @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("items")
  order_id String
  product_id String
}

